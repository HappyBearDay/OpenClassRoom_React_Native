1.

- React native was created by facebook

- Native app is developped one time for each platforms.
- Cross-platform app is developped only one time.

- Native app is more efficient than cross-platforms app.
- Native app looks like mobile app more than cross-platforms app.

- React Native enables to develop cross-platforms app.

- React Native uses Javascript

- React Native uses native components to create views.

- CRNA doesn't enable to use native code.

- To create, to develop, to execute a CRNA app, we have to install:
    - Node.js
    - Expo
    - text editor

- Javascript doesn't need to be compiled

- We can force the application reloading.


2.1 Components

component is a graphc element.
Split, group and reuse.
a view is a component, text is a component.

2 kinds of component : 
    - React Native components ( Views, button, text...)
        https://facebook.github.io/react-native/docs/components-and-apis.html#basic-components
        React Native components are converted to native components.
        
    - Custome components ( set of component )

a component renders a graphic element.
(render ~ return / send )

JSX is an extention of Javascript created by Facebook.
component is created by JSX.
JSX is easier than HTML.


2.2 Improve the Design of our applications.

A style is an attribut of a component.

React Native Styling Cheat Sheet : 
    -  https://github.com/vhpoet/react-native-styling-cheat-sheet

We can only add styles on React Native components. 

StyleSheet improves the performance of our applications.

2.3 FLexBox

Screen size managing.
Dynamic size.
Create views from the screen size and from others views.

style flex :
    - 0 : The component size depended of the size of the children components
    - 1 : The component takes all available area, 
          if the current component has siblings, 
          the area is fairly shared
    - x : The component takes x over n ( the size of parent ) of the the parent area.

justifyContent is a vertical setting

alignItems is an horizontal setting


--- Handling of components --- 
There are 2 ways to take hold of components:
    - Props 
    - States

2.4 Props

Props are proprieties appied to components.

When, you use a flatlist,
you have to be able to identify 
each element of a list by his key.

Props enable to set variables into components.
Cons : 
    - Props are defined by the parents components.
    - Props can't be modified by the current component.


2.5 States

States are enable to manage the current component's modifications.

State is defined component's constructor.
setstate => modify a state + reload the component
if we don't need to reload the component, 
it isn't a good idea to use a state, because to modify a state, 
we have to reload the whole component.

State contains only parameters which influence the app's returned.

2.6 Functions adding
Add 3 functions : 
    - Add loading indicator
        - _DisplayLoading
        - isLoading
    - Check reseach with keyboard
        - add  the props onSubmitEditing into TextInput. 
    - Display the movies' images
        - Add the function getImageFromApi in TMDBapi.js
        - Call getImageFromApi in FilmItem.js
    
2.7 setstate
Set States is asynchrones.

Infinite scrolling : 
    - a ) ( FlatList props ) onEndReached  : Detect the of the data list
        - the value is the length of the displayed FlatList part
    - b ) this.state.films is Concatenatable with the news list of films.
    - c ) the Second part of Set States is executed after the first.
    

3.1 ) Navigation

React Navigation is the views' navigation manager library.

Drawer navigator : Menu displayed on the left of your screen.

Tab navigator : Tab bar on the bottom of your screen.

Stack Navigator : Stack views one on the top of another

to export and to use navigation on our APP, we have to use a container called CreateAppContainer.